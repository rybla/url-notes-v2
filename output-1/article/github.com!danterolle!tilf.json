{"title":"GitHub - danterolle/tilf","byline":"danterolle","lang":"en","content":"<div id=\"readability-page-1\" class=\"page\"><div data-hpc=\"true\"><article itemprop=\"text\"><p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Tilf — Pixel Art Editor</h2><a id=\"user-content-tilf--pixel-art-editor\" aria-label=\"Permalink: Tilf — Pixel Art Editor\" href=\"#tilf--pixel-art-editor\"></a></p>\n<p dir=\"auto\">Tilf (Tiny Elf) is a simple yet powerful pixel art editor built with PySide6.\nIt’s designed for creating sprites, icons, and small 2D assets with essential tools, live preview, undo/redo, and export options.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/danterolle/tilf/blob/main/assets/icon.ico\"><img src=\"https://github.com/danterolle/tilf/raw/main/assets/icon.ico\" alt=\"Tilf\" title=\"Tilf\"></a></p>\n<p dir=\"auto\">There are several Pixel Art Editors that do the same things and even much more,\nbut many require an account registration or the insertion of an e-mail or have a certain business model.</p>\n<p dir=\"auto\">I'm <em>not</em> interested in all that, my goal is to be able to create sprites freely, with (almost) zero dependencies,\nzero setup time, zero installations:</p>\n<p dir=\"auto\">Tilf starts and I begin to draw what I want.</p>\n<p dir=\"auto\">It runs on Windows, MacOS and GNU/Linux.</p>\n<p dir=\"auto\">Download the latest release from the <a href=\"https://github.com/danterolle/tilf/releases\">releases page</a>.</p>\n<p dir=\"auto\"><strong>Windows 11</strong> -&gt; <a href=\"https://github.com/danterolle/tilf/releases/download/v0.1/tilf_0.1-Windows\">Download</a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/danterolle/tilf/blob/main/screenshots/windows.png\"><img src=\"https://github.com/danterolle/tilf/raw/main/screenshots/windows.png\" alt=\"Tilf on Windows\" title=\"Windows\"></a>\n<strong>MacOS 15.6</strong> -&gt; <a href=\"https://github.com/danterolle/tilf/releases/download/v0.1/tilf_0.1-MacOS.zip\">Download</a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/danterolle/tilf/blob/main/screenshots/macos.png\"><img src=\"https://github.com/danterolle/tilf/raw/main/screenshots/macos.png\" alt=\"Tilf on MacOS\" title=\"MacOS\"></a>\n<strong>GNU/Linux (ParrotOS 6.4)</strong> -&gt; <a href=\"https://github.com/danterolle/tilf/releases/download/v0.1/tilf_0.1-Linux\">Download</a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/danterolle/tilf/blob/main/screenshots/linux.png\"><img src=\"https://github.com/danterolle/tilf/raw/main/screenshots/linux.png\" alt=\"Tilf on GNU/Linux\" title=\"GNU/Linux\"></a></p>\n<p dir=\"auto\">I’m aware that the code quality isn’t great.\nI didn’t prioritize it when writing this.\nThis project was something I put together during my spare time, and a lot of it could be written much better.\nThere's definitely room for improvement, so I'm more than happy to accept PRs from anyone willing to contribute.</p>\n<p dir=\"auto\"><h4 tabindex=\"-1\" dir=\"auto\">Why doesn't this tool have many commits?</h4><a id=\"user-content-why-doesnt-this-tool-have-many-commits\" aria-label=\"Permalink: Why doesn't this tool have many commits?\" href=\"#why-doesnt-this-tool-have-many-commits\"></a></p>\n<p dir=\"auto\">Because I mainly used it for learning and personal purposes.\nPublish it as an Open Source project might be interesting for others as well.</p>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Table of Contents</h2><a id=\"user-content-table-of-contents\" aria-label=\"Permalink: Table of Contents\" href=\"#table-of-contents\"></a></p>\n<ul dir=\"auto\">\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#requirements\">Requirements</a></li>\n<li><a href=\"#build-on-macos-and-gnulinux\">Build on MacOS and GNU/Linux</a></li>\n<li><a href=\"#about-windows\">About Windows</a>\n<ul dir=\"auto\">\n<li><a href=\"#run-from-source\">Run from source</a></li>\n<li><a href=\"#build-executable-exe\">Build executable .exe</a></li>\n</ul>\n</li>\n<li><a href=\"#keyboard-shortcuts-for-file-operations\">Keyboard Shortcuts for file operations</a></li>\n<li><a href=\"#save-and-auto-save\">Save and Auto-Save</a></li>\n<li><a href=\"#tips-and-known-limits\">Tips and Known Limits</a></li>\n<li><a href=\"#troubleshooting---work-in-progress\">Troubleshooting - Work In Progress</a>\n<ul dir=\"auto\">\n<li><a href=\"#modulenotfounderror-no-module-named-pyside6\">ModuleNotFoundError: No module named 'PySide6'</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\">Contributing</a></li>\n<li><a href=\"#license\">License</a></li>\n<li><a href=\"#contact\">Contact</a></li>\n</ul>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Features</h2><a id=\"user-content-features\" aria-label=\"Permalink: Features\" href=\"#features\"></a></p>\n<ul dir=\"auto\">\n<li>Drawing tools:\n<ul dir=\"auto\">\n<li>Pencil</li>\n<li>Eraser</li>\n<li>Fill (bucket)</li>\n<li>Eyedropper</li>\n<li>Rectangle (stroke)</li>\n<li>Ellipse (stroke)</li>\n</ul>\n</li>\n<li>Canvas:\n<ul dir=\"auto\">\n<li>New image with custom dimensions</li>\n<li>Zoom 1–50x (mouse wheel or slider)</li>\n<li>Editable background color (alpha supported)</li>\n<li>Optional grid with customizable color</li>\n<li>Clear canvas</li>\n</ul>\n</li>\n<li>Workflow:\n<ul dir=\"auto\">\n<li>Undo/Redo with history up to 50 states</li>\n<li>Drag &amp; drop images to open</li>\n<li>Real-time preview in a side dock (you can move it wherever you want)</li>\n</ul>\n</li>\n<li>Import/Export:\n<ul dir=\"auto\">\n<li>Open PNG, JPEG/JPG, BMP</li>\n<li>Export to PNG (with or without transparency), JPEG/JPG, BMP</li>\n</ul>\n</li>\n<li>Handy details:\n<ul dir=\"auto\">\n<li>Hold Shift while drawing rectangles/ellipses to constrain to squares/circles</li>\n<li>Grid is shown when zoom (cell size) is at least 4</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Requirements</h2><a id=\"user-content-requirements\" aria-label=\"Permalink: Requirements\" href=\"#requirements\"></a></p>\n<ul dir=\"auto\">\n<li>Python 3, virtualenv</li>\n<li>OS: Windows, MacOS or GNULinux</li>\n<li>Dependencies:\n<ul dir=\"auto\">\n<li>PySide6</li>\n<li>PyInstaller</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\">I did not use uv or poetry for this project;\nI don't think it is necessary to introduce a tool of that kind for a project that is, all things considered, simple.</p>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Build on MacOS and GNU/Linux</h2><a id=\"user-content-build-on-macos-and-gnulinux\" aria-label=\"Permalink: Build on MacOS and GNU/Linux\" href=\"#build-on-macos-and-gnulinux\"></a></p>\n<ol dir=\"auto\">\n<li>Clone the repository:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"git clone https://github.com/danterolle/tilf.git &amp;&amp; cd tilf\"><pre><code>git clone https://github.com/danterolle/tilf.git &amp;&amp; cd tilf\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>This project has a <a href=\"https://github.com/danterolle/tilf/blob/main/Makefile\">Makefile</a>\nthat automates all the necessary build and cleanup operations for Tilf (for MacOS and GNU/Linux only), so we just need to run:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"make\"><pre><code>make\n</code></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>The executable will be in the <code>dist</code> folder.</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"./tilf\"><pre><code>./tilf\n</code></pre></div>\n<p dir=\"auto\">Enjoy!</p>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">About Windows</h2><a id=\"user-content-about-windows\" aria-label=\"Permalink: About Windows\" href=\"#about-windows\"></a></p>\n<p dir=\"auto\"><h3 tabindex=\"-1\" dir=\"auto\">Run from source</h3><a id=\"user-content-run-from-source\" aria-label=\"Permalink: Run from source\" href=\"#run-from-source\"></a></p>\n<ol dir=\"auto\">\n<li>Clone the repository by using Git Bash:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"git clone https://github.com/danterolle/tilf.git\"><pre><code>git clone https://github.com/danterolle/tilf.git\n</code></pre></div>\n<div data-snippet-clipboard-copy-content=\"cd tilf\"><pre><code>cd tilf\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Create a virtual environment:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"py.exe -m venv env\"><pre><code>py.exe -m venv env\n</code></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Activate the virtual environment:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"./env/Scripts/activate\"><pre><code>./env/Scripts/activate\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>Install the dependencies:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"pip install pyside6 pyinstaller pillow\"><pre><code>pip install pyside6 pyinstaller pillow\n</code></pre></div>\n<p dir=\"auto\">Note:</p>\n<ol start=\"5\" dir=\"auto\">\n<li>And finally, run the application:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"py.exe ./main.py\"><pre><code>py.exe ./main.py\n</code></pre></div>\n<p dir=\"auto\"><h3 tabindex=\"-1\" dir=\"auto\">Build executable .exe</h3><a id=\"user-content-build-executable-exe\" aria-label=\"Permalink: Build executable .exe\" href=\"#build-executable-exe\"></a></p>\n<ol dir=\"auto\">\n<li>Clone the repository by using Git Bash:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"git clone https://github.com/danterolle/tilf.git\"><pre><code>git clone https://github.com/danterolle/tilf.git\n</code></pre></div>\n<div data-snippet-clipboard-copy-content=\"cd tilf\"><pre><code>cd tilf\n</code></pre></div>\n<div data-snippet-clipboard-copy-content=\"./env/Scripts/activate\"><pre><code>./env/Scripts/activate\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Install the dependencies:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"pip install pyside6 pyinstaller pillow\"><pre><code>pip install pyside6 pyinstaller pillow\n</code></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Run PyInstaller:</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"pyinstaller --name tilf --onefile --windowed --icon assets/icon.icns --add-data assets:assets --add-data style.qss:. main.py\"><pre><code>pyinstaller --name tilf --onefile --windowed --icon assets/icon.icns --add-data assets:assets --add-data style.qss:. main.py\n</code></pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>The executable will be in the <code>dist</code> folder.</li>\n</ol>\n<div data-snippet-clipboard-copy-content=\"./tilf\"><pre><code>./tilf\n</code></pre></div>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Keyboard Shortcuts for file operations</h2><a id=\"user-content-keyboard-shortcuts-for-file-operations\" aria-label=\"Permalink: Keyboard Shortcuts for file operations\" href=\"#keyboard-shortcuts-for-file-operations\"></a></p>\n<ul dir=\"auto\">\n<li>File:\n<ul dir=\"auto\">\n<li>New: Ctrl+N</li>\n<li>Open: Ctrl+O</li>\n<li>Save: Ctrl+S</li>\n</ul>\n</li>\n<li>Edit:\n<ul dir=\"auto\">\n<li>Undo: Ctrl+Z</li>\n<li>Redo: Ctrl+Y</li>\n</ul>\n</li>\n<li>Tools:\n<ul dir=\"auto\">\n<li>Pencil: B</li>\n<li>Eraser: E</li>\n<li>Bucket: G</li>\n<li>Eyedropper: I</li>\n<li>Rectangle: R</li>\n<li>Ellipse: C</li>\n</ul>\n</li>\n<li>Shapes:\n<ul dir=\"auto\">\n<li>Constrain to square/circle: hold Shift</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Save and Auto-Save</h2><a id=\"user-content-save-and-auto-save\" aria-label=\"Permalink: Save and Auto-Save\" href=\"#save-and-auto-save\"></a></p>\n<ul dir=\"auto\">\n<li>Export formats:\n<ul dir=\"auto\">\n<li>PNG: optionally keep transparency.</li>\n<li>JPEG/JPG, BMP: no transparency.</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\">On close, if there are unsaved changes, a recovery <em>.png</em> is automatically saved into a <strong>tilf_autosaves</strong>\nfolder next to the startup script, with a timestamped filename.</p>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Tips and Known Limits</h2><a id=\"user-content-tips-and-known-limits\" aria-label=\"Permalink: Tips and Known Limits\" href=\"#tips-and-known-limits\"></a></p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/danterolle/tilf/blob/main/pixel_canvas.py#L31\">Undo/Redo history is capped at 50 states to limit memory usage</a>.</li>\n<li>Large flood fills may take longer on big images.</li>\n<li>The grid appears when zoom (cell size) is at least 4.</li>\n<li>Very large images may impact performance; Remember: <em>Tilf targets compact pixel art and sprites</em>.</li>\n</ul>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Troubleshooting - Work In Progress</h2><a id=\"user-content-troubleshooting---work-in-progress\" aria-label=\"Permalink: Troubleshooting - Work In Progress\" href=\"#troubleshooting---work-in-progress\"></a></p>\n<p dir=\"auto\"><h3 tabindex=\"-1\" dir=\"auto\">ModuleNotFoundError: No module named 'PySide6'</h3><a id=\"user-content-modulenotfounderror-no-module-named-pyside6\" aria-label=\"Permalink: ModuleNotFoundError: No module named 'PySide6'\" href=\"#modulenotfounderror-no-module-named-pyside6\"></a></p>\n<p dir=\"auto\">Ensure your virtualenv is active and run: pip install pyside6</p>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Contributing</h2><a id=\"user-content-contributing\" aria-label=\"Permalink: Contributing\" href=\"#contributing\"></a></p>\n<ul dir=\"auto\">\n<li>Open issues for bugs or feature requests.</li>\n<li>For PRs, please keep the code style consistent and explain changes clearly.</li>\n<li>Feature ideas are welcome (e.g. advanced fills, selections, layers). Thank you!</li>\n</ul>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">License</h2><a id=\"user-content-license\" aria-label=\"Permalink: License\" href=\"#license\"></a></p>\n<p dir=\"auto\">GPL v3.0, see the LICENSE file for details.</p>\n<p dir=\"auto\"><h2 tabindex=\"-1\" dir=\"auto\">Contact</h2><a id=\"user-content-contact\" aria-label=\"Permalink: Contact\" href=\"#contact\"></a></p>\n<ul dir=\"auto\">\n<li>Developer: Dario 'danterolle' Camonita</li>\n<li>E-mail: <a href=\"mailto:danterolle@catania.linux.it\">danterolle@catania.linux.it</a></li>\n</ul>\n</article></div></div>","textContent":"Tilf — Pixel Art Editor\nTilf (Tiny Elf) is a simple yet powerful pixel art editor built with PySide6.\nIt’s designed for creating sprites, icons, and small 2D assets with essential tools, live preview, undo/redo, and export options.\n\nThere are several Pixel Art Editors that do the same things and even much more,\nbut many require an account registration or the insertion of an e-mail or have a certain business model.\nI'm not interested in all that, my goal is to be able to create sprites freely, with (almost) zero dependencies,\nzero setup time, zero installations:\nTilf starts and I begin to draw what I want.\nIt runs on Windows, MacOS and GNU/Linux.\nDownload the latest release from the releases page.\nWindows 11 -> Download\n\nMacOS 15.6 -> Download\n\nGNU/Linux (ParrotOS 6.4) -> Download\n\nI’m aware that the code quality isn’t great.\nI didn’t prioritize it when writing this.\nThis project was something I put together during my spare time, and a lot of it could be written much better.\nThere's definitely room for improvement, so I'm more than happy to accept PRs from anyone willing to contribute.\nWhy doesn't this tool have many commits?\nBecause I mainly used it for learning and personal purposes.\nPublish it as an Open Source project might be interesting for others as well.\nTable of Contents\n\nFeatures\nRequirements\nBuild on MacOS and GNU/Linux\nAbout Windows\n\nRun from source\nBuild executable .exe\n\n\nKeyboard Shortcuts for file operations\nSave and Auto-Save\nTips and Known Limits\nTroubleshooting - Work In Progress\n\nModuleNotFoundError: No module named 'PySide6'\n\n\nContributing\nLicense\nContact\n\nFeatures\n\nDrawing tools:\n\nPencil\nEraser\nFill (bucket)\nEyedropper\nRectangle (stroke)\nEllipse (stroke)\n\n\nCanvas:\n\nNew image with custom dimensions\nZoom 1–50x (mouse wheel or slider)\nEditable background color (alpha supported)\nOptional grid with customizable color\nClear canvas\n\n\nWorkflow:\n\nUndo/Redo with history up to 50 states\nDrag & drop images to open\nReal-time preview in a side dock (you can move it wherever you want)\n\n\nImport/Export:\n\nOpen PNG, JPEG/JPG, BMP\nExport to PNG (with or without transparency), JPEG/JPG, BMP\n\n\nHandy details:\n\nHold Shift while drawing rectangles/ellipses to constrain to squares/circles\nGrid is shown when zoom (cell size) is at least 4\n\n\n\nRequirements\n\nPython 3, virtualenv\nOS: Windows, MacOS or GNULinux\nDependencies:\n\nPySide6\nPyInstaller\n\n\n\nI did not use uv or poetry for this project;\nI don't think it is necessary to introduce a tool of that kind for a project that is, all things considered, simple.\nBuild on MacOS and GNU/Linux\n\nClone the repository:\n\ngit clone https://github.com/danterolle/tilf.git && cd tilf\n\n\nThis project has a Makefile\nthat automates all the necessary build and cleanup operations for Tilf (for MacOS and GNU/Linux only), so we just need to run:\n\nmake\n\n\nThe executable will be in the dist folder.\n\n./tilf\n\nEnjoy!\nAbout Windows\nRun from source\n\nClone the repository by using Git Bash:\n\ngit clone https://github.com/danterolle/tilf.git\n\ncd tilf\n\n\nCreate a virtual environment:\n\npy.exe -m venv env\n\n\nActivate the virtual environment:\n\n./env/Scripts/activate\n\n\nInstall the dependencies:\n\npip install pyside6 pyinstaller pillow\n\nNote:\n\nAnd finally, run the application:\n\npy.exe ./main.py\n\nBuild executable .exe\n\nClone the repository by using Git Bash:\n\ngit clone https://github.com/danterolle/tilf.git\n\ncd tilf\n\n./env/Scripts/activate\n\n\nInstall the dependencies:\n\npip install pyside6 pyinstaller pillow\n\n\nRun PyInstaller:\n\npyinstaller --name tilf --onefile --windowed --icon assets/icon.icns --add-data assets:assets --add-data style.qss:. main.py\n\n\nThe executable will be in the dist folder.\n\n./tilf\n\nKeyboard Shortcuts for file operations\n\nFile:\n\nNew: Ctrl+N\nOpen: Ctrl+O\nSave: Ctrl+S\n\n\nEdit:\n\nUndo: Ctrl+Z\nRedo: Ctrl+Y\n\n\nTools:\n\nPencil: B\nEraser: E\nBucket: G\nEyedropper: I\nRectangle: R\nEllipse: C\n\n\nShapes:\n\nConstrain to square/circle: hold Shift\n\n\n\nSave and Auto-Save\n\nExport formats:\n\nPNG: optionally keep transparency.\nJPEG/JPG, BMP: no transparency.\n\n\n\nOn close, if there are unsaved changes, a recovery .png is automatically saved into a tilf_autosaves\nfolder next to the startup script, with a timestamped filename.\nTips and Known Limits\n\nUndo/Redo history is capped at 50 states to limit memory usage.\nLarge flood fills may take longer on big images.\nThe grid appears when zoom (cell size) is at least 4.\nVery large images may impact performance; Remember: Tilf targets compact pixel art and sprites.\n\nTroubleshooting - Work In Progress\nModuleNotFoundError: No module named 'PySide6'\nEnsure your virtualenv is active and run: pip install pyside6\nContributing\n\nOpen issues for bugs or feature requests.\nFor PRs, please keep the code style consistent and explain changes clearly.\nFeature ideas are welcome (e.g. advanced fills, selections, layers). Thank you!\n\nLicense\nGPL v3.0, see the LICENSE file for details.\nContact\n\nDeveloper: Dario 'danterolle' Camonita\nE-mail: danterolle@catania.linux.it\n\n","length":4966,"excerpt":"Contribute to danterolle/tilf development by creating an account on GitHub.","siteName":"GitHub","url":"https://github.com/danterolle/tilf"}