{"title":"OpenSSH: Post-Quantum Cryptography","lang":"en","content":"<div id=\"readability-page-1\" class=\"page\">\n<hr>\n\n<p>\nOpenSSH supports a number of cryptographic key agreement algorithms\nconsidered to be safe against attacks from quantum computers. \nWe recommend that all SSH connections use these algorithms.\n</p>\n\n<p>\nOpenSSH has offered post-quantum key agreement (<i>KexAlgorithms</i>)\nby default since release 9.0 (2022), initially via the\n<tt>sntrup761x25519-sha512</tt> algorithm. More recently, in OpenSSH 9.9,\nwe have added a second post-quantum key agreement <tt>mlkem768x25519-sha256</tt>\nand it was made the default scheme in OpenSSH 10.0.\n</p>\n\n<p>\nTo encourage migration to these stronger algorithms, OpenSSH 10.1 will warn\nthe user when a non post-quantum key agreement scheme is selected. These\nwarnings are displayed by default but may be disabled via the\n<i>WarnWeakCrypto</i> option in\n<a href=\"https://man.openbsd.org/ssh_config.5\">ssh_config(5)</a>.\n</p>\n\n<h3>Background</h3>\n\n<p>\nA quantum computer (QC) is a device capable of performing computations\nwith information encoded as quantum states. Such a device could quickly solve\nparticular problems that are intractable for existing \"classical\" computers.\n</p>\n\n<p>\nThe mathematics that underpin a number of cryptographic algorithms\nare among the problems that quantum computers are believed to be able to\neffectively solve. This means that a sufficiently-powerful quantum computer\n(a.k.a a \"cryptographically-relevant\" quantum computer) will be able to break\nthem. Most affected is the cryptography used for key agreement and digital\nsignatures, both of which play important roles in SSH.\n</p>\n\n<p>\nFortunately, quantum computers of sufficient power to break cryptography\nhave not been invented yet. Estimates for when a cryptographically-relevant\nquantum computer will arrive, based on the rate of progress in the field,\nrange from 5-20 years, with many observers expecting them to arrive\nin the mid-2030s.\n</p>\n\n<p>\nThe entire privacy of an SSH connection depends on cryptographic key agreement.\nIf an attacker can break the key agreement then they are able to decrypt and\nview the entire session. The attacker need not perform this attack in real\ntime; they may collect encrypted SSH sessions now and then decrypt them later\nonce they have access to a quantum computer.\nThis is referred to as a \"store now, decrypt later\" attack (also as\n\"harvest now, decrypt later\").\n</p>\n\n<p>\nOpenSSH supports post-quantum cryptography to protect user traffic against\nthis attack.\n</p>\n\n<h2>FAQ</h2>\n\n<dl>\n<dt><b>I received a warning from ssh that directed me to this page. What should I do?</b></dt>\n<dd>\nAs mentioned above, OpenSSH 10.1 started warning users when connections use\ncryptography that is not safe against quantum computers. If you received such\na warning, it means that the server you connected to did not offer one of the\ntwo post-quantum key agreement algorithms that are being standardised for the\nSSH protocol:\n<a href=\"https://datatracker.ietf.org/doc/draft-ietf-sshm-mlkem-hybrid-kex/\"><tt>mlkem768x25519-sha256</tt></a> and\n<a href=\"https://datatracker.ietf.org/doc/draft-josefsson-ntruprime-ssh/\"><tt>sntrup761x25519-sha512</tt></a>\n<p>\nThe ideal solution is to update the server to use an SSH implementation that\nsupports at least one of these. OpenSSH versions 9.0 and greater support\n</p><tt>sntrup761x25519-sha512</tt> and versions 9.9 and greater support\n<tt>mlkem768x25519-sha256</tt>. If your server is already running one of these\nversions, then check whether the <i>KexAlgorithms</i> option has disabled\ntheir use.\n<p>\nIf you are unable to update the server and/or you prefer to accept the risk\nof continuing to use quantum-unsafe cryptography then the warning may be\nsilenced via the \n<i>WarnWeakCrypto</i> option in\n<a href=\"https://man.openbsd.org/ssh_config.5\">ssh_config(5)</a>.\nWe recommend doing this selectively, for example:\n</p><pre>Match host unsafe.example.com\n    WarnWeakCrypto no\n</pre>\n</dd>\n<dt><b>Quantum computers don't exist yet, why go to all this trouble?</b></dt>\n<dd>\nBecause of the \"store now, decrypt later\" attack mentioned above. Traffic\nsent today is at risk of decryption unless post-quantum key agreement is used.\n</dd>\n<dt><b>What about signature algorithms? You said they were at risk too</b></dt>\n<dd>\nYes, most currently-used signature algorithms (including RSA and ECDSA) can be\nbroken by a quantum computer. However, there is no risk to existing traffic\nin this situation (i.e. there is no analogous \"store now, decrypt later\").\nThe only urgency for signature algorithms is ensuring that all classical\nsignature keys are retired in advance of cryptographically-relevant computers\nbecoming a reality. OpenSSH will add support for post-quantum signature\nalgorithms in the future.\n</dd>\n<dt><b>I don't believe we'll ever get quantum computers. This is a waste of time</b></dt>\n<dd>\nSome people consider the task of scaling existing quantum computers up to the\npoint where they can tackle cryptographic problems to be practically\ninsurmountable. This is a possibilty. However, it appears that most of the\nbarriers to a cryptographically-relevant quantum computer are engineering\nchallenges rather than underlying physics.\n<p>\nIf we're right about quantum computers being practical, then we will have\nprotected vast quantities of user data. If we're wrong about it, then all\nwe'll have done is moved to cryptographic algorithms with stronger mathematical\nunderpinnings.\n</p></dd>\n<dt><b>These post-quantum algorithms are new, are we sure they aren't broken?</b></dt>\n<dd>\nWe're wary of this too. Though post-quantum key agreement algorithms have\nreceived a lot of concerted cryptographic attention over the last few years,\nit's possible that new attacks might be found.\n<p>\nTo defend against this happening we have selected post-quantum algorithms with\ngood safety margins, this means that even if they turn out to be weaker than\nexpected they are still likely to be strong enough to be considered fit for\npurpose.\n</p><p>\nAdditionally, all the post-quantum algorithms implemented by OpenSSH are\n\"hybrids\" that combine a post-quantum algorithm with a classical\nalgorithm. For example </p><tt>mlkem768x25519-sha256</tt> combines ML-KEM, a\npost-quantum key agreement scheme, with ECDH/x25519, a classical key agreement\nalgorithm that was formerly OpenSSH's preferred default. This ensures that the\ncombined, hybrid algorithm is <i>no worse</i> than the previous best\nclassical algorithm, even if the post-quantum algorithm turns out to be\ncompletely broken by future cryptanalysis.\n</dd>\n</dl>\n\n</div>","textContent":"\n\n\n\nOpenSSH supports a number of cryptographic key agreement algorithms\nconsidered to be safe against attacks from quantum computers. \nWe recommend that all SSH connections use these algorithms.\n\n\n\nOpenSSH has offered post-quantum key agreement (KexAlgorithms)\nby default since release 9.0 (2022), initially via the\nsntrup761x25519-sha512 algorithm. More recently, in OpenSSH 9.9,\nwe have added a second post-quantum key agreement mlkem768x25519-sha256\nand it was made the default scheme in OpenSSH 10.0.\n\n\n\nTo encourage migration to these stronger algorithms, OpenSSH 10.1 will warn\nthe user when a non post-quantum key agreement scheme is selected. These\nwarnings are displayed by default but may be disabled via the\nWarnWeakCrypto option in\nssh_config(5).\n\n\nBackground\n\n\nA quantum computer (QC) is a device capable of performing computations\nwith information encoded as quantum states. Such a device could quickly solve\nparticular problems that are intractable for existing \"classical\" computers.\n\n\n\nThe mathematics that underpin a number of cryptographic algorithms\nare among the problems that quantum computers are believed to be able to\neffectively solve. This means that a sufficiently-powerful quantum computer\n(a.k.a a \"cryptographically-relevant\" quantum computer) will be able to break\nthem. Most affected is the cryptography used for key agreement and digital\nsignatures, both of which play important roles in SSH.\n\n\n\nFortunately, quantum computers of sufficient power to break cryptography\nhave not been invented yet. Estimates for when a cryptographically-relevant\nquantum computer will arrive, based on the rate of progress in the field,\nrange from 5-20 years, with many observers expecting them to arrive\nin the mid-2030s.\n\n\n\nThe entire privacy of an SSH connection depends on cryptographic key agreement.\nIf an attacker can break the key agreement then they are able to decrypt and\nview the entire session. The attacker need not perform this attack in real\ntime; they may collect encrypted SSH sessions now and then decrypt them later\nonce they have access to a quantum computer.\nThis is referred to as a \"store now, decrypt later\" attack (also as\n\"harvest now, decrypt later\").\n\n\n\nOpenSSH supports post-quantum cryptography to protect user traffic against\nthis attack.\n\n\nFAQ\n\n\nI received a warning from ssh that directed me to this page. What should I do?\n\nAs mentioned above, OpenSSH 10.1 started warning users when connections use\ncryptography that is not safe against quantum computers. If you received such\na warning, it means that the server you connected to did not offer one of the\ntwo post-quantum key agreement algorithms that are being standardised for the\nSSH protocol:\nmlkem768x25519-sha256 and\nsntrup761x25519-sha512\n\nThe ideal solution is to update the server to use an SSH implementation that\nsupports at least one of these. OpenSSH versions 9.0 and greater support\nsntrup761x25519-sha512 and versions 9.9 and greater support\nmlkem768x25519-sha256. If your server is already running one of these\nversions, then check whether the KexAlgorithms option has disabled\ntheir use.\n\nIf you are unable to update the server and/or you prefer to accept the risk\nof continuing to use quantum-unsafe cryptography then the warning may be\nsilenced via the \nWarnWeakCrypto option in\nssh_config(5).\nWe recommend doing this selectively, for example:\nMatch host unsafe.example.com\n    WarnWeakCrypto no\n\n\nQuantum computers don't exist yet, why go to all this trouble?\n\nBecause of the \"store now, decrypt later\" attack mentioned above. Traffic\nsent today is at risk of decryption unless post-quantum key agreement is used.\n\nWhat about signature algorithms? You said they were at risk too\n\nYes, most currently-used signature algorithms (including RSA and ECDSA) can be\nbroken by a quantum computer. However, there is no risk to existing traffic\nin this situation (i.e. there is no analogous \"store now, decrypt later\").\nThe only urgency for signature algorithms is ensuring that all classical\nsignature keys are retired in advance of cryptographically-relevant computers\nbecoming a reality. OpenSSH will add support for post-quantum signature\nalgorithms in the future.\n\nI don't believe we'll ever get quantum computers. This is a waste of time\n\nSome people consider the task of scaling existing quantum computers up to the\npoint where they can tackle cryptographic problems to be practically\ninsurmountable. This is a possibilty. However, it appears that most of the\nbarriers to a cryptographically-relevant quantum computer are engineering\nchallenges rather than underlying physics.\n\nIf we're right about quantum computers being practical, then we will have\nprotected vast quantities of user data. If we're wrong about it, then all\nwe'll have done is moved to cryptographic algorithms with stronger mathematical\nunderpinnings.\n\nThese post-quantum algorithms are new, are we sure they aren't broken?\n\nWe're wary of this too. Though post-quantum key agreement algorithms have\nreceived a lot of concerted cryptographic attention over the last few years,\nit's possible that new attacks might be found.\n\nTo defend against this happening we have selected post-quantum algorithms with\ngood safety margins, this means that even if they turn out to be weaker than\nexpected they are still likely to be strong enough to be considered fit for\npurpose.\n\nAdditionally, all the post-quantum algorithms implemented by OpenSSH are\n\"hybrids\" that combine a post-quantum algorithm with a classical\nalgorithm. For example mlkem768x25519-sha256 combines ML-KEM, a\npost-quantum key agreement scheme, with ECDH/x25519, a classical key agreement\nalgorithm that was formerly OpenSSH's preferred default. This ensures that the\ncombined, hybrid algorithm is no worse than the previous best\nclassical algorithm, even if the post-quantum algorithm turns out to be\ncompletely broken by future cryptanalysis.\n\n\n\n","length":5894,"excerpt":"OpenSSH post quantum cryptography","url":"https://www.openssh.com/pq.html"}