{"title":"The Best Line Length","byline":"Glyph Lefkowitz","lang":"en","content":"<div id=\"readability-page-1\" class=\"page\"><div>\n  <p>What’s a good maximum line length for your coding standard?</p>\n<p>This is, of course, a trick question. By posing it <em>as</em> a question, I have\ncreated the misleading impression that it <em>is</em> a question, but\n<a href=\"https://github.com/psf/black\">Black</a> has selected the correct number for you;\nit’s <a href=\"https://en.wikipedia.org/wiki/Chinese_numerology#Eight\">88 which is obviously very\nlucky</a>.</p>\n<p>Thanks for reading my blog.</p>\n<hr>\n<p>OK, OK. Clearly, there’s more to it than that. This is an age-old debate on the\nlevel of “tabs versus spaces”. So contentious, in fact, that even the famously\nopinionated Black <a href=\"https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#labels-line-length\">does in fact let you change\nit</a>.</p>\n<h2 id=\"ancient-history\">Ancient History</h2>\n<p>One argument that certain <a href=\"https://lkml.org/lkml/2020/5/29/1038\">silly\npeople</a><sup id=\"fnref:1:the-best-line-length-2025-8\"><a href=\"#fn:1:the-best-line-length-2025-8\" id=\"fnref:1\">1</a></sup> like to make is “why are we\nwrapping at 80 characters like we are using 80 character teletypes, it’s the\n2020s!  I have an ultrawide monitor!”.  The implication here is that the width\nof 80-character terminals is an antiquated relic, based entirely around the\nhardware limitations of a bygone era, and modern displays can put tons of stuff\non one line, so why not <em>use</em> that capability?</p>\n<p>This feels intuitively true, given the <em>huge</em> disparity between ancient times\nand now: on my own display, I can comfortably fit <em>about</em> 350 characters on a\nline. What a shame, to have so much room for so many characters in each line,\nand to waste it all on blank space!</p>\n<p>But... is that true?</p>\n<p>I stretched out my editor window all the way to measure that ‘350’ number, but\nI did not continue editing at that window width.  In order to have a more\ncomfortable editing experience, I switched back into <a href=\"https://github.com/joostkremers/writeroom-mode\">writeroom\nmode</a>, a mode which emulates a\nconsiderably more\n<a href=\"https://apps.apple.com/us/app/writeroom/id417967324?mt=12\">writerly</a>\napplication, which limits each line length to 92 characters, regardless of\nframe width.</p>\n<p>You’ve probably noticed this too.  Almost all sites that display prose of any\nkind limit their width, even on very wide screens.</p>\n<p>As silly as that tiny little ribbon of text running down the middle of your\nmonitor might look with a full-screened stereotypical news site or blog, if you\nfull-screen a site that <em>doesn’t</em> set that width-limit, although it <em>makes\nsense</em> that you can now use all that space up, it will look <a href=\"https://danluu.com/\"><em>extremely</em>,\nalmost unreadably bad</a>.</p>\n<p>Blogging software does not set a column width limit on your text because of\nsome 80-character-wide accident of history in the form of a hardware terminal.</p>\n<p>Similarly, if you really try to use that screen real estate to its fullest for\n<em>coding</em>, and start editing 200-300 character lines, you’ll quickly notice it\nstarts to feel just a bit weird and confusing.  It gets surprisingly easy to\nlose your place.  <em>Rhetorically</em> the “80 characters is just because of dinosaur\ntechnology! Use all those ultrawide pixels!” talking point is quite popular,\nbut <em>practically</em> people usually just want a few more characters worth of\nbreathing room, maxing out at 100 characters, far narrower than even the most\nsvelte widescreen.</p>\n<p>So maybe those 80 character terminals are holding us back a <em>little</em> bit,\nbut... wait a second.  Why were the <em>terminals</em> 80 characters wide in the first\nplace?</p>\n<h2 id=\"ancienter-history\">Ancienter History</h2>\n<p>As <a href=\"https://softwareengineering.stackexchange.com/a/148729\">this lovely Software Engineering Stack\nExchange</a> post\nsummarizes, terminals were probably 80 characters because teletypes were 80\ncharacters, and teletypes were probably 80 characters because punch cards were\n80 characters, and punch cards were probably 80 characters because <em>that’s just\nabout how many typewritten characters fit onto one line of a US-Letter piece of\npaper</em>.</p>\n<p>Even before typewriters, consider the average <em>newspaper</em>: why do we call a\nregularly-occurring featured article in a newspaper a “column”? Because\nbroadsheet papers were <em>too wide</em> to have only a single column; they would\nalways be broken into multiple!  Far more aggressive than 80 characters,\ncolumns in newspapers typically have <em>30</em> characters per line.</p>\n<p>The first newspaper printing machines were custom designed and could have used\nwhatever width they wanted, so why standardize on something so narrow?<sup id=\"fnref:2:the-best-line-length-2025-8\"><a href=\"#fn:2:the-best-line-length-2025-8\" id=\"fnref:2\">3</a></sup></p>\n<h2 id=\"science\">Science!</h2>\n<p>There has been a surprising amount of scientific research around <a href=\"https://en.wikipedia.org/wiki/Line_length\">this\nissue</a>, but in brief, there’s a\nreason here rooted in human physiology: when you read a block of text, you are\nnot consciously moving your eyes from word to word like you’re dragging a mouse\ncursor, repositioning continuously.  Human eyes reading text move in quick\nbursts of rotation called “<a href=\"https://en.wikipedia.org/wiki/Saccade\">saccades</a>”.\nIn order to quickly and accurately move from one line of text to another, the\nstart of the next line needs to be clearly visible in the reader’s peripheral\nvision in order for them to accurately target it.  This limits the angle of\nrotation that the reader can perform in a single saccade, and, thus, the length\nof a line that they can comfortably read without hunting around for the start\nof the next line every time they get to the end.</p>\n<p>So, 80 (or 88) characters isn’t too unreasonable for a limit.  It’s longer than\n<em>30</em> characters, that’s for sure!</p>\n<p>But, surely that’s not <em>all</em>, or this wouldn’t be so contentious in the first\nplace?</p>\n<h2 id=\"caveats\">Caveats</h2>\n<h3 id=\"the-screen-is-wide-though\">The screen <em>is</em> wide, though.</h3>\n<p>The ultrawide aficionados <em>do</em> have a point, even if it’s not really the\nsimple one about “old terminals” they originally thought.  Our modern\nwide-screen displays <em>are</em> criminally underutilized, particularly for text.\nEven adding in the big chunky file, class, and method tree browser over on the\nleft and the source code preview on the right, a brief survey of a Google Image\nsearch for “vs code” shows a <em>lot</em> of editors open with huge, blank areas on\nthe right side of the window.</p>\n<p>Big screens <em>are</em> super useful as they allow us to leverage our spatial\nmemories to keep more relevant code around and simply glance around as we\nthink, rather than navigate interactively.  But it only works if you remember\nto do it.</p>\n<p>Newspapers allowed us to read a ton of\ninformation in one sitting with minimum shuffling by packing in as much as 6\ncolumns of text.  You could read a column to the bottom of the page, back to\nthe top, and down again, several times.</p>\n<p>Similarly, books fill both of their opposed pages with text at the same time,\ndoubling the amount of stuff you can read at once before needing to turn the\npage.</p>\n<p>You may notice that reading text in a book, even in an ebook app, is more\ncomfortable than reading a ton of text by scrolling around in a web browser.\nThat’s because our eyes are <em>built</em> for saccades, and repeatedly tracking the\ncontinuous smooth motion of the page as it scrolls to a stop, then re-targeting\nthe new fixed location to start saccading around from, is literally more\nphysically strenuous on your eye’s muscles!</p>\n<p>There’s a reason that the <a href=\"https://en.wikipedia.org/wiki/Codex\">codex</a>\nwas a big technological innovation over the scroll.  This is a regression!</p>\n<p>Today, the right thing to do here is to make use of horizontally split panes in\nyour text editor or IDE, and just make a bit of conscious effort to set up the\nappropriate code on screen for the problem you’re working on.  However, this is\na potential area for different IDEs to really differentiate themselves, and\nbuild multi-column continuous-code-reading layouts that allow for buffers to\nwrap and be navigable newspaper-style.</p>\n<p>Similar, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/columns\">modern CSS has shockingly good support for multi-column\nlayouts</a>, and it’s a\nshame that true multi-column, page-turning layouts are so rare.  If I ever\nfigure out a way to deploy this here that isn’t horribly clunky and fighting\nmodern platform conventions like “scrolling horizontally is substantially more\nannoying and inconsistent than scrolling vertically” maybe I will experiment\nwith such a layout on this blog one day.  Until then… just make the browser\nwindow narrower so other useful stuff can be in the other parts of the screen,\nI guess.</p>\n<h3 id=\"code-isnt-prose\">Code Isn’t Prose</h3>\n<p>But, I digress. While I think that columnar layouts for reading prose <em>are</em> an\ninteresting thing more people should experiment with, code isn’t prose.</p>\n<p>The <em>metric</em> used for ideal line width, which you may have noticed if you\nclicked through some of those Wikipedia links earlier, is not “character cells\nin your editor window”, it is <em>characters per line</em>, or “CPL”.</p>\n<p>With an optimal CPL somewhere between 45 and 95, a <em>code</em>-line-width of\nsomewhere around 90 might actually be the best idea, because <em>whitespace uses\nup your line-width budget</em>.  In a typical object-oriented Python program<sup id=\"fnref:3:the-best-line-length-2025-8\"><a href=\"#fn:3:the-best-line-length-2025-8\" id=\"fnref:3\">2</a></sup>,\n<em>most</em> of your code ends up indented by at least 8 spaces: 4 for the class\nscope, 4 for the method scope.  Most likely a lot of it is 12, because any\ninteresting code will have at least one conditional or loop.  So, by the time\nyou’re done wasting all that horizontal space, a max line length of 90 actually\nlooks more like a maximum of 78... right about that sweet spot from the\nUS-Letter page in the typewriter that we started with.</p>\n<h3 id=\"what-about-soft-wrap\">What about soft-wrap?</h3>\n<p><em>In principle</em>, source code is structured information, whose presentation could\nbe fully decoupled from its serialized representation.  Everyone could configure\ntheir preferred line width appropriate to their custom preferences and the\nspecific physiological characteristics of their eyes, and the code could be\nformatted according to the language it was expressed in, and “hard wrapping”\ncould be a silly antiquated thing.</p>\n<p>The problem with this argument is the same as the argument against “but tabs\nare <em>semantic</em> indentation”, to wit: nope, no it isn’t.  What “in principle”\nmeans in the previous paragraph is actually “in a fantasy world which we do not\ninhabit”.  I’d love it if editors treated code this way and we had a rich\nhistory and tradition of structured manipulations rather than typing in strings\nof symbols to construct source code textually.  But that is not the world we\nlive in.  Hard wrapping is unfortunately necessary to integrate with diff\ntools.</p>\n<h2 id=\"so-whats-the-optimal-line-width\">So what’s the optimal line width?</h2>\n<p>The exact, specific number here is still ultimately a matter of personal\npreference.</p>\n<p>Hopefully, understanding the long history, science, and underlying physical\nconstraints can lead you to select a contextually appropriate value for your\nown purposes that will balance ease of reading, integration with the relevant\ntools in your ecosystem, diff size, presentation in the editors and IDEs that\nyour contributors tend to use, reasonable display in web contexts, on\npresentation slides, and so on.</p>\n<p>But — and this is important — counterpoint:</p>\n<p>No it isn’t, you don’t need to\nselect an optimal width, because it’s already been selected for you.  It is\n<a href=\"https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#labels-line-length\">88</a>.</p>\n<h2 id=\"acknowledgments\">Acknowledgments</h2>\n<p>Thank you for reading, and especially thank you to <a href=\"https://blog.glyph.im/pages/patrons.html\">my\npatrons</a> who are supporting my writing on this blog.  If\nyou like what you’ve read here and you’d like to read more of it, or you’d like\nto support my <a href=\"https://github.com/glyph/\">various open-source endeavors</a>, you\ncan <a href=\"https://blog.glyph.im/pages/patrons.html\">support my work as a sponsor</a>!</p>\n<div>\n<hr>\n<ol>\n<li id=\"fn:1:the-best-line-length-2025-8\">\n<p id=\"fn:1\">I love the fact that this message is, itself, hard-wrapped to 77\ncharacters.&nbsp;<a href=\"#fnref:1:the-best-line-length-2025-8\" title=\"Jump back to footnote 1 in the text\">↩</a></p>\n</li>\n<li id=\"fn:3:the-best-line-length-2025-8\">\n<p id=\"fn:3\">Let’s be honest; we’re all object-oriented python programmers here,\naren’t we?&nbsp;<a href=\"#fnref:3:the-best-line-length-2025-8\" title=\"Jump back to footnote 2 in the text\">↩</a></p>\n</li>\n<li id=\"fn:2:the-best-line-length-2025-8\">\n<p id=\"fn:2\">Unsurprisingly, there are also financial reasons. <a href=\"https://www.josephdickerson.com/blog/2011/11/13/what-is-the-reason-for-multi-column-layout-in-magazines-and-newspapers/\">More, narrower\ncolumns meant it was easier to fix typesetting errors and to insert more\nadvertisements as\nnecessary</a>. But\nreadability really did have a lot to do with it, too; scientists were\nlooking at ease of reading as far back as the 1800s.&nbsp;<a href=\"#fnref:2:the-best-line-length-2025-8\" title=\"Jump back to footnote 3 in the text\">↩</a></p>\n</li>\n</ol>\n</div>\n</div></div>","textContent":"\n  What’s a good maximum line length for your coding standard?\nThis is, of course, a trick question. By posing it as a question, I have\ncreated the misleading impression that it is a question, but\nBlack has selected the correct number for you;\nit’s 88 which is obviously very\nlucky.\nThanks for reading my blog.\n\nOK, OK. Clearly, there’s more to it than that. This is an age-old debate on the\nlevel of “tabs versus spaces”. So contentious, in fact, that even the famously\nopinionated Black does in fact let you change\nit.\nAncient History\nOne argument that certain silly\npeople1 like to make is “why are we\nwrapping at 80 characters like we are using 80 character teletypes, it’s the\n2020s!  I have an ultrawide monitor!”.  The implication here is that the width\nof 80-character terminals is an antiquated relic, based entirely around the\nhardware limitations of a bygone era, and modern displays can put tons of stuff\non one line, so why not use that capability?\nThis feels intuitively true, given the huge disparity between ancient times\nand now: on my own display, I can comfortably fit about 350 characters on a\nline. What a shame, to have so much room for so many characters in each line,\nand to waste it all on blank space!\nBut... is that true?\nI stretched out my editor window all the way to measure that ‘350’ number, but\nI did not continue editing at that window width.  In order to have a more\ncomfortable editing experience, I switched back into writeroom\nmode, a mode which emulates a\nconsiderably more\nwriterly\napplication, which limits each line length to 92 characters, regardless of\nframe width.\nYou’ve probably noticed this too.  Almost all sites that display prose of any\nkind limit their width, even on very wide screens.\nAs silly as that tiny little ribbon of text running down the middle of your\nmonitor might look with a full-screened stereotypical news site or blog, if you\nfull-screen a site that doesn’t set that width-limit, although it makes\nsense that you can now use all that space up, it will look extremely,\nalmost unreadably bad.\nBlogging software does not set a column width limit on your text because of\nsome 80-character-wide accident of history in the form of a hardware terminal.\nSimilarly, if you really try to use that screen real estate to its fullest for\ncoding, and start editing 200-300 character lines, you’ll quickly notice it\nstarts to feel just a bit weird and confusing.  It gets surprisingly easy to\nlose your place.  Rhetorically the “80 characters is just because of dinosaur\ntechnology! Use all those ultrawide pixels!” talking point is quite popular,\nbut practically people usually just want a few more characters worth of\nbreathing room, maxing out at 100 characters, far narrower than even the most\nsvelte widescreen.\nSo maybe those 80 character terminals are holding us back a little bit,\nbut... wait a second.  Why were the terminals 80 characters wide in the first\nplace?\nAncienter History\nAs this lovely Software Engineering Stack\nExchange post\nsummarizes, terminals were probably 80 characters because teletypes were 80\ncharacters, and teletypes were probably 80 characters because punch cards were\n80 characters, and punch cards were probably 80 characters because that’s just\nabout how many typewritten characters fit onto one line of a US-Letter piece of\npaper.\nEven before typewriters, consider the average newspaper: why do we call a\nregularly-occurring featured article in a newspaper a “column”? Because\nbroadsheet papers were too wide to have only a single column; they would\nalways be broken into multiple!  Far more aggressive than 80 characters,\ncolumns in newspapers typically have 30 characters per line.\nThe first newspaper printing machines were custom designed and could have used\nwhatever width they wanted, so why standardize on something so narrow?3\nScience!\nThere has been a surprising amount of scientific research around this\nissue, but in brief, there’s a\nreason here rooted in human physiology: when you read a block of text, you are\nnot consciously moving your eyes from word to word like you’re dragging a mouse\ncursor, repositioning continuously.  Human eyes reading text move in quick\nbursts of rotation called “saccades”.\nIn order to quickly and accurately move from one line of text to another, the\nstart of the next line needs to be clearly visible in the reader’s peripheral\nvision in order for them to accurately target it.  This limits the angle of\nrotation that the reader can perform in a single saccade, and, thus, the length\nof a line that they can comfortably read without hunting around for the start\nof the next line every time they get to the end.\nSo, 80 (or 88) characters isn’t too unreasonable for a limit.  It’s longer than\n30 characters, that’s for sure!\nBut, surely that’s not all, or this wouldn’t be so contentious in the first\nplace?\nCaveats\nThe screen is wide, though.\nThe ultrawide aficionados do have a point, even if it’s not really the\nsimple one about “old terminals” they originally thought.  Our modern\nwide-screen displays are criminally underutilized, particularly for text.\nEven adding in the big chunky file, class, and method tree browser over on the\nleft and the source code preview on the right, a brief survey of a Google Image\nsearch for “vs code” shows a lot of editors open with huge, blank areas on\nthe right side of the window.\nBig screens are super useful as they allow us to leverage our spatial\nmemories to keep more relevant code around and simply glance around as we\nthink, rather than navigate interactively.  But it only works if you remember\nto do it.\nNewspapers allowed us to read a ton of\ninformation in one sitting with minimum shuffling by packing in as much as 6\ncolumns of text.  You could read a column to the bottom of the page, back to\nthe top, and down again, several times.\nSimilarly, books fill both of their opposed pages with text at the same time,\ndoubling the amount of stuff you can read at once before needing to turn the\npage.\nYou may notice that reading text in a book, even in an ebook app, is more\ncomfortable than reading a ton of text by scrolling around in a web browser.\nThat’s because our eyes are built for saccades, and repeatedly tracking the\ncontinuous smooth motion of the page as it scrolls to a stop, then re-targeting\nthe new fixed location to start saccading around from, is literally more\nphysically strenuous on your eye’s muscles!\nThere’s a reason that the codex\nwas a big technological innovation over the scroll.  This is a regression!\nToday, the right thing to do here is to make use of horizontally split panes in\nyour text editor or IDE, and just make a bit of conscious effort to set up the\nappropriate code on screen for the problem you’re working on.  However, this is\na potential area for different IDEs to really differentiate themselves, and\nbuild multi-column continuous-code-reading layouts that allow for buffers to\nwrap and be navigable newspaper-style.\nSimilar, modern CSS has shockingly good support for multi-column\nlayouts, and it’s a\nshame that true multi-column, page-turning layouts are so rare.  If I ever\nfigure out a way to deploy this here that isn’t horribly clunky and fighting\nmodern platform conventions like “scrolling horizontally is substantially more\nannoying and inconsistent than scrolling vertically” maybe I will experiment\nwith such a layout on this blog one day.  Until then… just make the browser\nwindow narrower so other useful stuff can be in the other parts of the screen,\nI guess.\nCode Isn’t Prose\nBut, I digress. While I think that columnar layouts for reading prose are an\ninteresting thing more people should experiment with, code isn’t prose.\nThe metric used for ideal line width, which you may have noticed if you\nclicked through some of those Wikipedia links earlier, is not “character cells\nin your editor window”, it is characters per line, or “CPL”.\nWith an optimal CPL somewhere between 45 and 95, a code-line-width of\nsomewhere around 90 might actually be the best idea, because whitespace uses\nup your line-width budget.  In a typical object-oriented Python program2,\nmost of your code ends up indented by at least 8 spaces: 4 for the class\nscope, 4 for the method scope.  Most likely a lot of it is 12, because any\ninteresting code will have at least one conditional or loop.  So, by the time\nyou’re done wasting all that horizontal space, a max line length of 90 actually\nlooks more like a maximum of 78... right about that sweet spot from the\nUS-Letter page in the typewriter that we started with.\nWhat about soft-wrap?\nIn principle, source code is structured information, whose presentation could\nbe fully decoupled from its serialized representation.  Everyone could configure\ntheir preferred line width appropriate to their custom preferences and the\nspecific physiological characteristics of their eyes, and the code could be\nformatted according to the language it was expressed in, and “hard wrapping”\ncould be a silly antiquated thing.\nThe problem with this argument is the same as the argument against “but tabs\nare semantic indentation”, to wit: nope, no it isn’t.  What “in principle”\nmeans in the previous paragraph is actually “in a fantasy world which we do not\ninhabit”.  I’d love it if editors treated code this way and we had a rich\nhistory and tradition of structured manipulations rather than typing in strings\nof symbols to construct source code textually.  But that is not the world we\nlive in.  Hard wrapping is unfortunately necessary to integrate with diff\ntools.\nSo what’s the optimal line width?\nThe exact, specific number here is still ultimately a matter of personal\npreference.\nHopefully, understanding the long history, science, and underlying physical\nconstraints can lead you to select a contextually appropriate value for your\nown purposes that will balance ease of reading, integration with the relevant\ntools in your ecosystem, diff size, presentation in the editors and IDEs that\nyour contributors tend to use, reasonable display in web contexts, on\npresentation slides, and so on.\nBut — and this is important — counterpoint:\nNo it isn’t, you don’t need to\nselect an optimal width, because it’s already been selected for you.  It is\n88.\nAcknowledgments\nThank you for reading, and especially thank you to my\npatrons who are supporting my writing on this blog.  If\nyou like what you’ve read here and you’d like to read more of it, or you’d like\nto support my various open-source endeavors, you\ncan support my work as a sponsor!\n\n\n\n\nI love the fact that this message is, itself, hard-wrapped to 77\ncharacters. ↩\n\n\nLet’s be honest; we’re all object-oriented python programmers here,\naren’t we? ↩\n\n\nUnsurprisingly, there are also financial reasons. More, narrower\ncolumns meant it was easier to fix typesetting errors and to insert more\nadvertisements as\nnecessary. But\nreadability really did have a lot to do with it, too; scientists were\nlooking at ease of reading as far back as the 1800s. ↩\n\n\n\n","length":10964,"excerpt":"What’s a good maximum line length for your coding standard?","url":"https://blog.glyph.im/2025/08/the-best-line-length.html","addedTime":"2025-08-12,08:43"}